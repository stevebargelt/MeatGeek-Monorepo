---
name: IoT Edge CI

on: # yamllint disable-line rule:truthy
  push:
    branches:
      - main
    paths:
      - ".github/workflows/iot-edge-ci.yaml"
      - ".github/workflows/iot-edge-cd.yaml"
      - "iot-edge/modules/**"
      - "iot-edge/.env_template"
      - "iot-edge/deployment.template.json"
  schedule:
    - cron: "20 11 * * *"
  workflow_dispatch:

env:
  ACR_IMAGE_PATH_TELEMETRY: ${{ secrets.ACR_LOGIN_SERVER }}/telemetry:1.0.${{ github.run_number }}-arm64v8
  DOTNET_VERSION: "6.0.x"
  AZURE_RESOURCEGROUP_NAME: "MeatGeek-IoT"
  APP_PACKAGE_PATH: "." # set this to the path to your function app project, defaults to the repository root
  DEPLOYMENT_TAG: "demodevice"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Setup DotNet ${{ env.DOTNET_VERSION }} Environment"
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ACR
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}

      - name: Build Telemetry docker image
        run: |
          cd ./iot-edge/modules/Telemetry
          docker buildx build --platform linux/arm64 -t ${{env.ACR_IMAGE_PATH_TELEMETRY}} -f Dockerfile.arm64v8 .

      - name: Push Telemetry docker image
        run: |
          docker push ${{env.ACR_IMAGE_PATH_TELEMETRY}}

      - name: Read variables from env file
        run: |
          cp ./iot-edge/.env_template ./iot-edge/.env
          # cat ./iot-edge/.env
          sed -i 's/^#.*//' ./iot-edge/.env
          sed -i '/^$/d' ./iot-edge/.env
          sed -i 's%^ACR_USERNAME=.*%ACR_USERNAME=${{ secrets.ACR_USERNAME }}%' ./iot-edge/.env
          sed -i 's%^ACR_PASSWORD=.*%ACR_PASSWORD=${{ secrets.ACR_PASSWORD }}%' ./iot-edge/.env
          sed -i 's%^ACR_ADDRESS=.*%ACR_ADDRESS=${{ secrets.ACR_LOGIN_SERVER }}%' ./iot-edge/.env
          sed -i 's%^IOT_HUB_RESOURCE_ID=.*%IOT_HUB_RESOURCE_ID=${{ secrets.IOT_HUB_RESOURCE_ID }}%' ./iot-edge/.env
          sed -i 's%^LOG_ANALYTICS_WORKSPACE_ID=.*%LOG_ANALYTICS_WORKSPACE_ID=${{ secrets.IOT_LOG_ANALYTICS_WORKSPACE_ID }}%' ./iot-edge/.env
          sed -i 's%^LOG_ANALYTICS_SHARED_KEY=.*%LOG_ANALYTICS_SHARED_KEY=${{ secrets.IOT_LOG_ANALYTICS_SHARED_KEY }}%' ./iot-edge/.env
          cat ./iot-edge/.env

      # install iotedgedev
      - name: install iotedgedev
        run: |
          cd ./iot-edge
          make install_iotedgedev
          make install_azure_iot

      # Changing the docker image version based on the current build number
      - name: Change docker image versions
        run: |
          cd ${GITHUB_WORKSPACE}/iot-edge/modules/Telemetry
          cat module.json | jq '.image.tag.version =  $v' --arg v '1.0.${{ github.run_number }}' | sponge module.json

      # generating iotedge config file
      - name: generate deployment config json
        run: |
          cd ./iot-edge
          cat .env
          iotedgedev genconfig -f ./deployment.template.json -P arm64v8

      # Creating the deployment of the modules using the config file generated in the above step
      - name: Create modules deployment
        env:
          IOT_SERVICE_CONNECTION: ${{ secrets.IOT_SERVICE_CONNECTION}}
        run: |
          cd ./iot-edge/config
          cat deployment.arm64v8.json 
          az iot edge deployment create -d "${{ github.run_number }}" -l "${{env.IOT_SERVICE_CONNECTION}}" -k deployment.arm64v8.json -t "tags.environment='${{env.DEPLOYMENT_TAG}}'"
