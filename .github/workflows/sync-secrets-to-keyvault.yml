name: Sync Secrets to Key Vault

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - prod
          - staging
          - test
          - all
      secret_type:
        description: 'Type of secrets to sync'
        required: true
        type: choice
        options:
          - all
          - iot
          - relay
          - eventgrid
          - storage

env:
  KEY_VAULT_NAME: meatgeekkv

jobs:
  sync-secrets:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment == 'prod' && 'production' || github.event.inputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Sync IoT Secrets
        if: contains(github.event.inputs.secret_type, 'all') || contains(github.event.inputs.secret_type, 'iot')
        run: |
          ENV_SUFFIX=""
          if [[ "${{ github.event.inputs.environment }}" != "prod" ]]; then
            ENV_SUFFIX="-${{ github.event.inputs.environment }}"
          fi
          
          # Only sync if secrets exist in GitHub
          if [[ -n "${{ secrets.IOT_SERVICE_CONNECTION }}" ]]; then
            az keyvault secret set \
              --vault-name ${{ env.KEY_VAULT_NAME }} \
              --name "IoTServiceConnection${ENV_SUFFIX}" \
              --value "${{ secrets.IOT_SERVICE_CONNECTION }}"
          fi
          
          if [[ -n "${{ secrets.IOT_EVENTHUB_ENDPOINT }}" ]]; then
            az keyvault secret set \
              --vault-name ${{ env.KEY_VAULT_NAME }} \
              --name "IoTEventHubEndpoint${ENV_SUFFIX}" \
              --value "${{ secrets.IOT_EVENTHUB_ENDPOINT }}"
          fi
      
      - name: Sync Relay Secrets
        if: contains(github.event.inputs.secret_type, 'all') || contains(github.event.inputs.secret_type, 'relay')
        run: |
          ENV_SUFFIX=""
          if [[ "${{ github.event.inputs.environment }}" != "prod" ]]; then
            ENV_SUFFIX="-${{ github.event.inputs.environment }}"
          fi
          
          # Map GitHub secrets to Key Vault
          declare -A relay_secrets=(
            ["RELAY_NAMESPACE"]="RelayNamespace${ENV_SUFFIX}"
            ["RELAY_CONNECTION_NAME"]="RelayConnectionName${ENV_SUFFIX}"
            ["RELAY_KEY_NAME"]="RelayKeyName${ENV_SUFFIX}"
            ["RELAY_KEY"]="RelayKey${ENV_SUFFIX}"
          )
          
          for github_secret in "${!relay_secrets[@]}"; do
            kv_secret="${relay_secrets[$github_secret]}"
            secret_value="${!github_secret}"
            
            if [[ -n "$secret_value" ]]; then
              az keyvault secret set \
                --vault-name ${{ env.KEY_VAULT_NAME }} \
                --name "$kv_secret" \
                --value "$secret_value"
            fi
          done
      
      - name: Generate Missing Secrets
        run: |
          # Generate any missing secrets
          ${{ github.workspace }}/infrastructure/scripts/populate-secrets.sh
      
      - name: Validate Secrets
        run: |
          echo "## Secret Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ENV_SUFFIX=""
          if [[ "${{ github.event.inputs.environment }}" != "prod" ]]; then
            ENV_SUFFIX="-${{ github.event.inputs.environment }}"
          fi
          
          # List of required secrets
          REQUIRED_SECRETS=(
            "SharedCosmosConnectionString${ENV_SUFFIX}"
            "EventGridTopicKey${ENV_SUFFIX}"
            "RelayKey${ENV_SUFFIX}"
          )
          
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            REQUIRED_SECRETS+=(
              "IoTServiceConnection"
              "IoTEventHubEndpoint"
              "IoTSharedAccessConnString"
            )
          fi
          
          echo "### Required Secrets Status" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Name | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if az keyvault secret show --vault-name ${{ env.KEY_VAULT_NAME }} --name "$secret" &>/dev/null; then
              echo "| $secret | ✅ Present |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $secret | ❌ Missing |" >> $GITHUB_STEP_SUMMARY
            fi
          done