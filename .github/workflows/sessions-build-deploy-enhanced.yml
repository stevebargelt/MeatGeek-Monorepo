name: Sessions API Build, Test & Deploy

on:
  push:
    branches:
      - main
      - develop
    paths:
      - ".github/workflows/sessions-build-deploy-enhanced.yml"
      - "sessions/src/MeatGeek.Sessions.Api/**"
      - "sessions/src/MeatGeek.Sessions.Services/**"
      - "sessions/build/build.yaml"
      - "shared/src/**"
      - "shared/build/build.yaml"
      - "!sessions/docs"
      - "!sessions/mkdocs.yml"
      - "!sessions/build/build-docs.yaml"
      - "!.vscode"
  schedule:
    - cron: "20 11 * * *"
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME_PROD: "meatgeeksessionsapi"
  AZURE_FUNCTIONAPP_NAME_STAGING: "meatgeeksessionsapi-pre-prod"
  DOTNET_VERSION: "8.0.x"
  AZURE_RESOURCEGROUP_NAME_PROD: "MeatGeek-Sessions"
  AZURE_RESOURCEGROUP_NAME_STAGING: "MeatGeek-Sessions-Staging"
  AZURE_FUNCTIONAPP_PACKAGE_PATH: "."

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    outputs:
      test-status: ${{ steps.test-execution.outcome }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
            
      - name: Restore dependencies
        run: |
          dotnet restore sessions/src/MeatGeek.Sessions.Api/MeatGeek.Sessions.Api.csproj
          dotnet restore sessions/src/MeatGeek.Sessions.Services/MeatGeek.Sessions.Services.csproj
          dotnet restore sessions/src/MeatGeek.Sessions.Api.Tests/MeatGeek.Sessions.Api.Tests.csproj
          dotnet restore sessions/src/MeatGeek.Sessions.Services.Tests/MeatGeek.Sessions.Services.Tests.csproj
          
      - name: Build projects
        run: |
          dotnet build sessions/src/MeatGeek.Sessions.Api/MeatGeek.Sessions.Api.csproj --configuration Release --no-restore
          dotnet build sessions/src/MeatGeek.Sessions.Services/MeatGeek.Sessions.Services.csproj --configuration Release --no-restore
          dotnet build sessions/src/MeatGeek.Sessions.Api.Tests/MeatGeek.Sessions.Api.Tests.csproj --configuration Release --no-restore
          dotnet build sessions/src/MeatGeek.Sessions.Services.Tests/MeatGeek.Sessions.Services.Tests.csproj --configuration Release --no-restore
          
      - name: Run Unit Tests
        id: test-execution
        run: |
          echo "Running API Tests..."
          dotnet test sessions/src/MeatGeek.Sessions.Api.Tests/MeatGeek.Sessions.Api.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger trx \
            --results-directory ./test-results/api
            
          echo "Running Services Tests..."
          dotnet test sessions/src/MeatGeek.Sessions.Services.Tests/MeatGeek.Sessions.Services.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger trx \
            --results-directory ./test-results/services
            
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ./test-results/
          
      - name: Test Summary
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Sessions API Test Results
          path: './test-results/**/*.trx'
          reporter: dotnet-trx
          fail-on-error: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test  # ⚠️ CRITICAL: Deploy only runs if tests pass
    if: success() && github.ref == 'refs/heads/main'  # Only deploy to prod from main
    
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4

      - name: "Setup DotNet ${{ env.DOTNET_VERSION }} Environment"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Resolve Project Dependencies Using Dotnet"
        shell: bash
        run: |
          pushd './sessions/src/MeatGeek.Sessions.Api'
          dotnet restore
          dotnet publish --configuration Release --output ../../../output --no-restore
          popd

      - name: "Run Azure Functions Action"
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_PROD }}
          package: "./output"
          publish-profile: ${{ secrets.PUBLISH_PROFILE_SESSIONS_API_FUNCTION_APP }}

      - name: Slack Notification
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          config: .github/config/slack.yml
          channel: "#development"
          message: |
            Sessions API Deployment ${{ job.status }}
            Tests: ${{ needs.test.outputs.test-status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
        if: always()
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test  # ⚠️ CRITICAL: Deploy only runs if tests pass
    if: success() && github.ref == 'refs/heads/develop'  # Only deploy to staging from develop
    
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4

      - name: "Setup DotNet ${{ env.DOTNET_VERSION }} Environment"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Resolve Project Dependencies Using Dotnet"
        shell: bash
        run: |
          pushd './sessions/src/MeatGeek.Sessions.Api'
          dotnet restore
          dotnet publish --configuration Release --output ../../../output --no-restore
          popd

      - name: "Run Azure Functions Action"
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_STAGING }}
          package: "./output"
          publish-profile: ${{ secrets.PUBLISH_PROFILE_SESSIONS_API_FUNCTION_APP_STAGING }}

      - name: Slack Notification
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          config: .github/config/slack.yml
          channel: "#development"
          message: |
            Sessions API Staging Deployment ${{ job.status }}
            Tests: ${{ needs.test.outputs.test-status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
        if: always()